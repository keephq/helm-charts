{{- if .Values.database.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "keep.fullname" . }}-database
  labels:
    {{- include "keep.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
    keep-component: database
spec:
  {{- if not .Values.database.autoscaling.enabled }}
  replicas: {{ .Values.database.replicaCount }}
  {{- end }}
  {{- with .Values.database.strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "keep.selectorLabels" . | nindent 6 }}
      keep-component: database
  template:
    metadata:
      {{- with .Values.database.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "keep.labels" . | nindent 8 }}
        app.kubernetes.io/component: database
        keep-component: database
    spec:
      {{- with .Values.database.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "keep.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.database.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.database.securityContext | nindent 12 }}
          {{- if eq .Values.database.type "mysql" }}
          image: "{{ .Values.database.mysql.image.repository }}:{{ .Values.database.mysql.image.tag }}"
          {{- else }}
          image: "{{ .Values.database.postgres.image.repository }}:{{ .Values.database.postgres.image.tag }}"
          args:
            - "-c"
            - "max_connections={{ .Values.database.postgres.config.maxConnections }}"
            - "-c"
            - "shared_buffers={{ .Values.database.postgres.config.sharedBuffers }}"
          {{- end }}
          imagePullPolicy: {{ .Values.database.image.pullPolicy }}
          ports:
            - name: {{ .Values.database.type }}
              containerPort: {{ index .Values.database .Values.database.type "port" }}
              protocol: TCP
          env:
            {{- if eq .Values.database.type "mysql" }}
            {{- range .Values.database.mysql.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- else }}
            {{- range .Values.database.postgres.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- end }}
          volumeMounts:
          - mountPath: {{ index .Values.database .Values.database.type "dataDir" }}
            name: {{ include "keep.fullname" . }}-pv
            readOnly: false
          {{- with .Values.database.extraVolumeMounts }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- if .Values.database.healthCheck.enabled }}
          {{- toYaml .Values.database.healthCheck.probes | nindent 10 }}
          {{- end }}
          resources:
            {{- toYaml .Values.database.resources | nindent 12 }}
      {{- with .Values.database.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.database.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.database.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: {{ include "keep.fullname" . }}-pv
          persistentVolumeClaim:
            claimName: {{ include "keep.fullname" . }}-pvc
        {{- with .Values.database.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
{{- end }}