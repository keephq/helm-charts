name: Test MySQL Integration

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run workflow with debug logging'
        required: false
        default: true
        type: boolean

jobs:
  test-mysql:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          npm install -g wscat
          sudo apt-get update && sudo apt-get install -y curl mysql-client

      - name: Create kind config
        run: |
          cat <<-EOF > kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
            - role: control-plane
              extraPortMappings:
                - containerPort: 80
                  hostPort: 80
                  protocol: TCP
                - containerPort: 443
                  hostPort: 443
                  protocol: TCP
          EOF
  
      - name: Debug kind config
        if: ${{ inputs.debug_enabled }}
        run: cat kind-config.yaml

      - name: Create kind cluster
        uses: helm/kind-action@v1.9.0
        with:
          wait: 600s
          config: kind-config.yaml

      - name: Install Nginx Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm install nginx-ingress ingress-nginx/ingress-nginx \
            --set controller.service.type=NodePort \
            --set controller.watchIngressWithoutClass=true \
            --set controller.allowSnippetAnnotations=true \
            --set controller.config.allow-snippets=true \
            --set controller.config.enable-snippets=true \
            --set controller.config.annotations-risk-level=Critical \
            --set controller.hostPort.enabled=true \
            --set controller.service.ports.http=80 \
            --set controller.service.ports.https=443 \
            --set controller.nodeSelector."kubernetes\.io/os"=linux \
            --set controller.admissionWebhooks.enabled=false

      - name: Wait for Nginx Ingress
        run: |
          echo "Waiting for Nginx Ingress pods..."
          kubectl wait --namespace default \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/instance=nginx-ingress \
            --timeout=90s

      - name: Create test values for MySQL
        run: |
          mkdir -p debug
          cat <<EOF > debug/mysql-values.yaml
          global:
            ingress:
              enabled: true
              className: nginx
              classType: nginx
              websocketPrefix: /websocket
              backendPrefix: /v2
              frontendPrefix: /
          frontend:
            enabled: true
          backend:
            enabled: true
            waitForDatabase:
              enabled: true
              port: 3306
            env:
              - name: DATABASE_CONNECTION_STRING
                value: "mysql+pymysql://root:mysecretpassword@keep-database:3306/keep"
              - name: DATABASE_NAME
                value: keep-database
              - name: SECRET_MANAGER_TYPE
                value: k8s
              - name: PORT
                value: "8080"
              - name: PUSHER_APP_ID
                value: 1
              - name: PUSHER_APP_KEY
                value: keepappkey
              - name: PUSHER_APP_SECRET
                value: keepappsecret
              - name: PUSHER_HOST
                value: keep-websocket
              - name: PUSHER_PORT
                value: "6001"
              - name: PROMETHEUS_MULTIPROC_DIR
                value: "/tmp/prometheus"
          websocket:
            enabled: true
          database:
            enabled: true
            type: mysql
            mysql:
              image:
                repository: mysql
                tag: "8.0"
              env:
                - name: MYSQL_DATABASE
                  value: keep
                - name: MYSQL_ROOT_PASSWORD
                  value: mysecretpassword
              port: 3306
              # Add MySQL readiness probe to ensure database is truly ready
              readinessProbe:
                exec:
                  command:
                    - bash
                    - -c
                    - "mysqladmin ping -h 127.0.0.1 -u root -p\${MYSQL_ROOT_PASSWORD}"
                initialDelaySeconds: 30
                periodSeconds: 10
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 3
              config:
                maxConnections: 100
                innodbBufferPoolSize: 128M
                maxAllowedPacket: 16M
            resources:
              requests:
                cpu: "500m"
                memory: "512Mi"
              limits:
                cpu: "1000m"
                memory: "1Gi"
          EOF

      - name: Debug - Show test values
        if: ${{ inputs.debug_enabled }}
        run: cat debug/mysql-values.yaml

      - name: Install Keep chart
        run: |
          helm install keep ./charts/keep -f debug/mysql-values.yaml
    
      - name: Wait for database
        run: |
          echo "Waiting for MySQL database to be ready..."
          kubectl wait --namespace default \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/instance=keep,keep-component=database \
            --timeout=180s
          
          # Get pod name
          DB_POD=$(kubectl get pod -l keep-component=database -o jsonpath="{.items[0].metadata.name}")
          
          # Test TCP connectivity first (more reliable than socket)
          echo "Waiting for MySQL to accept TCP connections..."
          COUNTER=0
          MAX_TRIES=30
          while [ $COUNTER -lt $MAX_TRIES ]; do
            if kubectl exec $DB_POD -- mysqladmin ping -h 127.0.0.1 -u root -pmysecretpassword; then
              echo "‚úÖ MySQL is accepting connections!"
              break
            fi
            echo "‚è≥ Waiting for MySQL to initialize (attempt $((COUNTER+1))/$MAX_TRIES)..."
            sleep 10
            COUNTER=$((COUNTER+1))
          done
          
          if [ $COUNTER -eq $MAX_TRIES ]; then
            echo "‚ùå MySQL failed to initialize properly after all attempts"
            kubectl describe pod $DB_POD
            kubectl logs $DB_POD
            exit 1
          fi
          
          # Verify MySQL is fully functional with a simple query
          echo "Testing MySQL functionality..."
          kubectl exec $DB_POD -- mysql -h 127.0.0.1 -u root -pmysecretpassword -e "SELECT 1;"
          if [ $? -ne 0 ]; then
            echo "‚ùå MySQL query test failed"
            exit 1
          fi
          echo "‚úÖ MySQL is fully initialized and functional"

      - name: Test database connection
        run: |
          DB_POD=$(kubectl get pod -l keep-component=database -o jsonpath="{.items[0].metadata.name}")
          echo "Testing MySQL connection..."
          kubectl exec $DB_POD -- bash -c "mysql -h 127.0.0.1 -u root -pmysecretpassword keep -e 'SHOW TABLES;'"
          echo "Testing database version..."
          kubectl exec $DB_POD -- bash -c "mysql -h 127.0.0.1 -u root -pmysecretpassword -e 'SELECT VERSION();'"

      - name: Wait for all pods
        run: |
          echo "Waiting for all pods to be ready..."
          kubectl wait --for=condition=ready pod --all -n default --timeout=180s
          
          echo "Checking pod status..."
          kubectl get pods -n default
          
          echo "Checking ingress status..."
          kubectl get ingress -n default
          
          echo "Waiting additional 30s for services to stabilize..."
          sleep 30

      - name: Debug - Show resources
        if: ${{ inputs.debug_enabled }}
        run: |
          echo "üîç Checking all resources..."
          kubectl get pods -A
          kubectl get svc -A
          kubectl get ingress -A
          kubectl describe ingress -A

      - name: Test endpoints
        run: |
          INGRESS_IP="127.0.0.1"
          APP_NAME=$(helm list -n default -o json | jq -r '.[0].name')
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          test_endpoint() {
            local url=$1
            local expected_code=$2
            local headers=${3:-""}
            
            for ((i=1; i<=MAX_RETRIES; i++)); do
              echo "Attempt $i of $MAX_RETRIES for $url"
              echo "Headers being sent: $headers"
              
              if [ -n "$headers" ]; then
                echo "Full curl command: curl -v $headers \"$url\""
                RESP=$(curl -v $headers "$url" 2>&1)
              else
                echo "Full curl command: curl -v \"$url\""
                RESP=$(curl -v "$url" 2>&1)
              fi
              
              # Extract response code, handling connection failures
              RESP_CODE=$(echo "$RESP" | grep "< HTTP" | awk '{print $3}')
              if [ -z "$RESP_CODE" ]; then
                echo "‚ö†Ô∏è No response code received - connection may have failed"
                echo -e "\nüîç Response Details:"
                echo "------------------------"
                echo "Response code: Connection failed"
                echo -e "\nüìã Response Headers:"
                echo "$RESP" | grep -E "^< " || echo "No headers found"
                echo -e "\nüìù Response Body:"
                echo "$RESP" | sed -n '/^* Connected/,/^* Connection/!p' | grep -v "^[*<>]" || echo "No body found"
                echo "------------------------"
                
                if [ "$i" -lt "$MAX_RETRIES" ]; then
                  echo "‚è≥ Waiting ${RETRY_DELAY}s before next attempt..."
                  sleep "$RETRY_DELAY"
                  continue
                fi
                echo "‚ùå Failed to establish connection after $MAX_RETRIES attempts"
                return 1
              fi
              
              echo -e "\nüîç Response Details:"
              echo "------------------------"
              echo "Response code: $RESP_CODE"
              echo -e "\nüìã Response Headers:"
              echo "$RESP" | grep -E "^< " || echo "No headers found"
              echo -e "\nüìù Response Body:"
              echo "$RESP" | sed -n '/^* Connected/,/^* Connection/!p' | grep -v "^[*<>]" || echo "No body found"
              echo "------------------------"
              
              if [ "$RESP_CODE" -eq "$expected_code" ]; then
                echo "‚úÖ Expected response code $expected_code received"
                return 0
              fi
              
              if [ "$i" -lt "$MAX_RETRIES" ]; then
                echo "‚è≥ Waiting ${RETRY_DELAY}s before next attempt..."
                sleep "$RETRY_DELAY"
              fi
            done
            echo "‚ùå Failed to get expected response code $expected_code after $MAX_RETRIES attempts"
            return 1
          }
          
          echo "üåê Testing frontend endpoint..."
          test_endpoint "http://$INGRESS_IP/" 307 || exit 1
          
          echo "üîå Testing backend endpoint..."
          test_endpoint "http://$INGRESS_IP/v2/docs" 200 || exit 1
          
          echo "üîÑ Testing websocket endpoint..."
          test_endpoint "http://$INGRESS_IP/websocket/" 200 || exit 1
        
      - name: Debug - Show logs on failure
        if: ${{ failure() && inputs.debug_enabled }}
        run: |
          echo "üìú Nginx Ingress Controller logs:"
          kubectl logs -l app.kubernetes.io/instance=nginx-ingress --tail=100
          
          echo "üìú Database logs:"
          kubectl logs -l keep-component=database --tail=200
          
          echo "üìú MySQL Database status:"
          DB_POD=$(kubectl get pod -l keep-component=database -o jsonpath="{.items[0].metadata.name}" 2>/dev/null) || echo "No database pod found"
          if [ -n "$DB_POD" ]; then
            echo "Pod details for $DB_POD:"
            kubectl describe pod $DB_POD
            
            echo "MySQL process status:"
            kubectl exec $DB_POD -- ps aux 2>/dev/null || echo "Cannot execute command in database pod"
            
            echo "MySQL container logs:"
            kubectl logs $DB_POD --tail=200
          fi
          
          echo "üìú Backend logs:"
          kubectl logs -l keep-component=backend --tail=100
          
          echo "Application pods logs:"
          for pod in $(kubectl get pods -n default -l app.kubernetes.io/instance=keep -o name); do
            echo "Logs for $pod:"
            kubectl logs $pod --tail=100
          done